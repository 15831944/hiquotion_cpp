// YUVRGBConverter.h: interface for the CYUVRGBConverter class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_YUVRGBCONVERTER_H__FC28D57E_07D8_48B2_B927_AF268E5A442F__INCLUDED_)
#define AFX_YUVRGBCONVERTER_H__FC28D57E_07D8_48B2_B927_AF268E5A442F__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

// RGB to YUV420 used

static int RGB2YUV_YR[256], RGB2YUV_YG[256], RGB2YUV_YB[256];
static int RGB2YUV_UR[256], RGB2YUV_UG[256], RGB2YUV_UBVR[256];
static int RGB2YUV_VG[256], RGB2YUV_VB[256];

static unsigned char convert_uu[320*240];
static unsigned char convert_vv[320*240];

// YUV420 to RGB24 used

// static long int crv_tab[256];
// static long int cbu_tab[256];
// static long int cgu_tab[256];
// static long int cgv_tab[256];
// static long int tab_76309[256];
// static unsigned char clp[1024];			//for clip in CCIR601

static double YUV2RGB_CONVERT_MATRIX[3][3] = { { 1, 0, 1.4022 }, { 1, -0.3456, -0.7145 }, { 1, 1.771, 0 } };
 
// #define PIXELSIZE width * height   
// static int Table_fv1[256]={ -180, -179, -177, -176, -174, -173, -172, -170, -169, -167, -166, -165, -163, -162, -160, -159, -158, -156, -155, -153, -152, -151, -149, -148, -146, -145, -144, -142, -141, -139, -138, -137, -135, -134, -132, -131, -130, -128, -127, -125, -124, -123, -121, -120, -118, -117, -115, -114, -113, -111, -110, -108, -107, -106, -104, -103, -101, -100, -99, -97, -96, -94, -93, -92, -90, -89, -87, -86, -85, -83, -82, -80, -79, -78, -76, -75, -73, -72, -71, -69, -68, -66, -65, -64, -62, -61, -59, -58, -57, -55, -54, -52, -51, -50, -48, -47, -45, -44, -43, -41, -40, -38, -37, -36, -34, -33, -31, -30, -29, -27, -26, -24, -23, -22, -20, -19, -17, -16, -15, -13, -12, -10, -9, -8, -6, -5, -3, -2, 0, 1, 2, 4, 5, 7, 8, 9, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 28, 29, 30, 32, 33, 35, 36, 37, 39, 40, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 79, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 105, 106, 107, 109, 110, 112, 113, 114, 116, 117, 119, 120, 122, 123, 124, 126, 127, 129, 130, 131, 133, 134, 136, 137, 138, 140, 141, 143, 144, 145, 147, 148, 150, 151, 152, 154, 155, 157, 158, 159, 161, 162, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 178 };  
// static int Table_fv2[256]={ -92, -91, -91, -90, -89, -88, -88, -87, -86, -86, -85, -84, -83, -83, -82, -81, -81, -80, -79, -78, -78, -77, -76, -76, -75, -74, -73, -73, -72, -71, -71, -70, -69, -68, -68, -67, -66, -66, -65, -64, -63, -63, -62, -61, -61, -60, -59, -58, -58, -57, -56, -56, -55, -54, -53, -53, -52, -51, -51, -50, -49, -48, -48, -47, -46, -46, -45, -44, -43, -43, -42, -41, -41, -40, -39, -38, -38, -37, -36, -36, -35, -34, -33, -33, -32, -31, -31, -30, -29, -28, -28, -27, -26, -26, -25, -24, -23, -23, -22, -21, -21, -20, -19, -18, -18, -17, -16, -16, -15, -14, -13, -13, -12, -11, -11, -10, -9, -8, -8, -7, -6, -6, -5, -4, -3, -3, -2, -1, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12, 12, 13, 14, 15, 15, 16, 17, 17, 18, 19, 20, 20, 21, 22, 22, 23, 24, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 32, 32, 33, 34, 35, 35, 36, 37, 37, 38, 39, 40, 40, 41, 42, 42, 43, 44, 45, 45, 46, 47, 47, 48, 49, 50, 50, 51, 52, 52, 53, 54, 55, 55, 56, 57, 57, 58, 59, 60, 60, 61, 62, 62, 63, 64, 65, 65, 66, 67, 67, 68, 69, 70, 70, 71, 72, 72, 73, 74, 75, 75, 76, 77, 77, 78, 79, 80, 80, 81, 82, 82, 83, 84, 85, 85, 86, 87, 87, 88, 89, 90, 90 };  
// static int Table_fu1[256]={ -44, -44, -44, -43, -43, -43, -42, -42, -42, -41, -41, -41, -40, -40, -40, -39, -39, -39, -38, -38, -38, -37, -37, -37, -36, -36, -36, -35, -35, -35, -34, -34, -33, -33, -33, -32, -32, -32, -31, -31, -31, -30, -30, -30, -29, -29, -29, -28, -28, -28, -27, -27, -27, -26, -26, -26, -25, -25, -25, -24, -24, -24, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, -12, -12, -11, -11, -11, -10, -10, -10, -9, -9, -9, -8, -8, -8, -7, -7, -7, -6, -6, -6, -5, -5, -5, -4, -4, -4, -3, -3, -3, -2, -2, -2, -1, -1, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 43, 43 };  
// static int Table_fu2[256]={ -227, -226, -224, -222, -220, -219, -217, -215, -213, -212, -210, -208, -206, -204, -203, -201, -199, -197, -196, -194, -192, -190, -188, -187, -185, -183, -181, -180, -178, -176, -174, -173, -171, -169, -167, -165, -164, -162, -160, -158, -157, -155, -153, -151, -149, -148, -146, -144, -142, -141, -139, -137, -135, -134, -132, -130, -128, -126, -125, -123, -121, -119, -118, -116, -114, -112, -110, -109, -107, -105, -103, -102, -100, -98, -96, -94, -93, -91, -89, -87, -86, -84, -82, -80, -79, -77, -75, -73, -71, -70, -68, -66, -64, -63, -61, -59, -57, -55, -54, -52, -50, -48, -47, -45, -43, -41, -40, -38, -36, -34, -32, -31, -29, -27, -25, -24, -22, -20, -18, -16, -15, -13, -11, -9, -8, -6, -4, -2, 0, 1, 3, 5, 7, 8, 10, 12, 14, 15, 17, 19, 21, 23, 24, 26, 28, 30, 31, 33, 35, 37, 39, 40, 42, 44, 46, 47, 49, 51, 53, 54, 56, 58, 60, 62, 63, 65, 67, 69, 70, 72, 74, 76, 78, 79, 81, 83, 85, 86, 88, 90, 92, 93, 95, 97, 99, 101, 102, 104, 106, 108, 109, 111, 113, 115, 117, 118, 120, 122, 124, 125, 127, 129, 131, 133, 134, 136, 138, 140, 141, 143, 145, 147, 148, 150, 152, 154, 156, 157, 159, 161, 163, 164, 166, 168, 170, 172, 173, 175, 177, 179, 180, 182, 184, 186, 187, 189, 191, 193, 195, 196, 198, 200, 202, 203, 205, 207, 209, 211, 212, 214, 216, 218, 219, 221, 223, 225 };  



// RGB to YUV422 used

// #define GetY(R,G,B) (0.257*(R)+0.504*(G)+0.98*(B)+16)
// #define GetU(R,G,B) (0.148*(R)-0.291*(G)+0.439*(B)+128)
// #define GetV(R,G,B) (0.439*(R)-0.368*(G)-0.071*(B)+128)

class CColorSystemConverter  
{
public:
	CColorSystemConverter();
	virtual ~CColorSystemConverter();

	// 存储空间

	// RGB = W x H x 3
	// YUV2(YUV422) = W x H x 2
	// YUV420 = W x H x 3 / 2

	// YUV2 to RGB

	// YUV2 是 YUV422 格式的一种，即 YUYV 格式

	//YUV2转RGB24整型版算法,注意RGB缓冲区应是YUV2的1.5倍,可以通过(((m_lpbmi->bmiHeader.biWidth * m_lpbmi->bmiHeader.biBitCount + 31) >> 5 ) << 2) * m_lpbmi->bmiHeader.biHeight;
	//算出RGB图像大小
	static void YUY2ToRGB(BYTE *YUY2buff, BYTE *RGBbuff, DWORD dwYUVSize);
	// BMP 图像垂直翻转
	static void Vertical(BYTE *src, int width, int height, BYTE *dst);


	// YUV2 to YUV420Planar Planar是平面格式，H.264编码库需要使用 YUV420 平面格式
	static void YUV2ToYUV420Planar(BYTE *yuv2, int width, int height, BYTE *yuv420planar);

	// YUV420Planar to RGB
	static void YUV420PlanarToRGB(BYTE *yuv420planar, int width, int height, BYTE *rgb);

	// YUV420分量 to RGB
	static void YUV420ToRGB(BYTE *y,BYTE *u, BYTE *v, int width, int height, BYTE *rgb);

	// RGB to YUV420Planar
	static void RGBToYUV420Planar(BYTE *rgb, int width, int height, BYTE *yuv420planar);

// 	// RGB to YUV422
// 
// 	/*******************************************
// 	yuv422Planar format 数据排列：
// 	Y0Y1Y2Y3....
// 	U0U2U4....
// 	V1V3V5....
// 	********************************************/
// 	static void RGBtoYUV422Planar(const unsigned char *rgbData,int height,int width,int widthstep,unsigned char*yuvData);
// 
// 	/*******************************
// 	yuv422Packed format 数据排列：
// 	Y0U0Y1V1Y2U2Y3V3.....
// 	................
// 
// 	*******************************/
// 	static void RGBtoYUV422Packed(const unsigned char *rgbData,int height,int width,int widthstep,unsigned char *yuvData);
// 
// 	static int YUV422PackedtoPlanar(const unsigned char *packedData,unsigned char *planarData,int heigh,int width);
// 
// 	// RGB to YUV420
// 
// 	static void RGBToYUV420InitTable();
// 	static void RGBToYUV420(BYTE *rgb, BYTE *yuv, int width, int height,unsigned long *len);
// 
// 	// YUV420 to RGB
// 
// 	static void YUV420ToRGBInitTable();
// 	static void YUV420ToRGB(BYTE *yuv, BYTE *rgb, int width, int height,unsigned long *len);

private:
	// 限制数值 v 在0到255之间
	static BYTE Clip255( LONG v );
	
};

#endif // !defined(AFX_YUVRGBCONVERTER_H__FC28D57E_07D8_48B2_B927_AF268E5A442F__INCLUDED_)
